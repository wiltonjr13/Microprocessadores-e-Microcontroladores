Quais as diferenças entre os barramentos de dados e de endereços?

Barramento de dados: é o barramento que ocorre as trocas de dados no computador, tanto enviados quanto recebidos. Portanto, um microprocessador de 8 bits requer um barramento de dados de 8 linhas para transmitir dados de 8 bits em paralelo. Semelhantemente, um microprocessador de 64 bits necessita de um barramento de dados de 64 linhas para transmitir dados de 64 bits em paralelo.

Barraamento de endereço: é usado para selecionar a origem ou destino de sinais transmitidos num dos outros barramentos ou numa de suas linhas. Ele conduz endereços. Uma função típica do Barramento de Endereço é selecionar um registrador num dos dispositivos do sistema que é usado como a fonte ou o destino do dado.

Quais são as diferenças entre as memórias RAM e ROM?

A memória RAM (Random Access Memory) é um tipo de memória volátil que serve para rodar aplicações depois que o computador já está ligado, e cujas informações são perdidas depois do desligamento da máquina e que pode ser acessada a qualquer momento pelo sistema operacional para carregar e sobrescrever informações com muita rapidez. Podem ter 8 GB, 16 GB ou mais de capacidade. O preço pode variar muito, mas, em geral, o tipo RAM costuma ser bem mais caro que o ROM.

Já a memoria ROM significa Read-Only Memory, ou Memória Somente de Leitura, e está principalmente localizada no chip responsável pela iniciação do sistema – é lá que as informações básicas do computador ficam armazenadas, portanto não são afetadas quando o dispositivo é desligado.Os dados armazenados pela memória ROM são pequenos, por isso sua capacidade de armazenamento não costuma passar dos 4 MB.

Considere o código abaixo:
#include <stdio.h>
int main(void)
{
        int i;
        printf("Insira um número inteiro: ");
        scanf("%d", &i);
        if(i%2)
                printf("%d eh impar.\n");
        else
                printf("%d eh par.\n");
        return 0;
}

Para este código, responda: 
(a) A variável i é armazenada na memória RAM ou ROM? Por quê? 
Na RAM, porque todo o progama em c roda na RAM, até porque a memoria ROM, há somente a configuração de boot do computador

(b) O programa compilado a partir deste código é armazenado na memória RAM ou ROM? Por quê?
Na RAM, porque todo o progama em c roda na RAM, até porque a memoria ROM, há somente a configuração de boot do computador



Quais são as diferenças, vantagens e desvantagens das arquiteturas Harvard e Von Neumann?

	A arquitetura de von Neumann é uma arquitetura que se caracteriza pela possibilidade de uma máquina digital armazenar seus programas no mesmo espaço de memória que os dados, podendo assim manipular tais programas. A máquina proposta por Von Neumann reúne os seguintes componentes: uma memória, uma unidade aritmética e lógica (ALU), uma unidade central de processamento (CPU), composta por diversos registradores, e uma Unidade de Controle (CU), cuja função é a mesma da tabela de controle da Máquina de Turing universal: buscar um programa na memória, instrução por instrução, e executá-lo sobre os dados de entrada.
	A Arquitetura de Harvard baseia-se em um conceito mais recente que a de Von-Neumann, tendo vindo da necessidade de por o microcontrolador para trabalhar mais rápido. É uma arquitetura de computador que se distingue das outras por possuir duas memórias diferentes e independentes em termos de barramento e ligação ao processador. A principal vantagem desta arquitetura é dada pela dupla ligação às memórias de dados e programa (código), permitindo assim que o processador leia uma instrução ao mesmo tempo que faz um acesso à memória de dados.
	Sendo assim, a principal diferença entre a arquitetura Von Neumann e a Harvard é que a última separa o armazenamento e o comportamento das instruções do CPU e os dados, enquanto a anterior utiliza o mesmo espaço de memória para ambos. Dessa forma, a arquitetura Neumann é mais lenta, simples e menos eficiente do que a Harvard.

Considere a variável inteira i, armazenando o valor 0x8051ABCD. Se i é armazenada na memória a partir do endereço 0x0200, como ficam este byte e os seguintes, considerando que a memória é: 

(a) Little-endian; 

Endereços:

0200: CD
0201: AB
0202: 51
0203: 80

(b) Big-endian.

Endereços:

0200: 80
0201: 51
0202: AB
0203: CD
